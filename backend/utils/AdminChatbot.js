import { GoogleGenerativeAI } from "@google/generative-ai";
import axios from "axios";

const genAI = new GoogleGenerativeAI("AIzaSyB1PFojq35s-GwtD1bSPXb6MxqwCkV6ptg");

async function fetchDashboardData(token) {
  const urls = {
    stats: "http://localhost:5000/api/dashboard/stats",
    monthlyRevenue: "http://localhost:5000/api/dashboard/monthly-revenue",
    topProducts: "http://localhost:5000/api/dashboard/top-products",
    latestOrders: "http://localhost:5000/api/dashboard/latest-orders",
    latestUsers: "http://localhost:5000/api/dashboard/latest-users",
    orderStatus: "http://localhost:5000/api/dashboard/order-status",
  };

  try {
    const responses = await Promise.all(
      Object.values(urls).map((url) =>
        axios.get(url, { headers: { Authorization: `Bearer ${token}` } })
      )
    );

    const [
      statsRes,
      monthlyRevenueRes,
      topProductsRes,
      latestOrdersRes,
      latestUsersRes,
      orderStatusRes,
    ] = responses;

    return {
      stats: statsRes.data,
      monthlyRevenue: monthlyRevenueRes.data,
      topProducts: topProductsRes.data,
      latestOrders: latestOrdersRes.data,
      latestUsers: latestUsersRes.data,
      orderStatus: orderStatusRes.data,
    };
  } catch (error) {
    console.error("L·ªói khi l·∫•y d·ªØ li·ªáu dashboard:", error.message);
    return null;
  }
}

async function askAdminQuestion(question, token) {
  try {
    const data = await fetchDashboardData(token);
    if (!data) {
      return `<p class="error-message">Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu dashboard.</p>`;
    }

    // HTML hi·ªÉn th·ªã dashboard
    const dashboardHtml = `
        <div class="dashboard-chat-response">
          <div class="card">
            <h3>üìä Th·ªëng k√™ t·ªïng quan</h3>
            <div class="row"><span class="label">T·ªïng s·∫£n ph·∫©m:</span> <span class="value">${
              data.stats.totalProducts
            }</span></div>
            <div class="row"><span class="label">T·ªïng ng∆∞·ªùi d√πng:</span> <span class="value">${
              data.stats.totalUsers
            }</span></div>
            <div class="row"><span class="label">T·ªïng ƒë∆°n h√†ng:</span> <span class="value">${
              data.stats.totalOrders
            }</span></div>
            <div class="row"><span class="label">T·ªïng doanh thu:</span> <span class="value">${data.stats.totalRevenue.toLocaleString(
              "vi-VN"
            )} VND</span></div>
          </div>
          <div class="card">
            <h3>üìÖ Doanh thu theo th√°ng</h3>
            <ul>
              ${data.monthlyRevenue
                .map(
                  (item) => `
                <li><span class="label">${
                  item._id
                }:</span> <span class="value">${item.totalRevenue.toLocaleString(
                    "vi-VN"
                  )} VND</span></li>
              `
                )
                .join("")}
            </ul>
          </div>
          <div class="card">
            <h3>üî• Top 5 s·∫£n ph·∫©m b√°n ch·∫°y</h3>
            <ul>
              ${data.topProducts
                .map(
                  (p, idx) => `
                <li><span class="label">${idx + 1}. ${
                    p.name
                  }</span> <span class="value">(${
                    p.totalSold
                  } ƒë√£ b√°n)</span></li>
              `
                )
                .join("")}
            </ul>
          </div>
          <div class="card">
            <h3>üõí ƒê∆°n h√†ng m·ªõi nh·∫•t</h3>
            <ul>
              ${data.latestOrders
                .map(
                  (order) => `
                <li><span class="label">#${
                  order.orderCode
                }</span> - <span class="value">${
                    order.user?.name || "Kh√°ch"
                  }</span> (${
                    order.isPaid ? "ƒê√£ thanh to√°n" : "Ch∆∞a thanh to√°n"
                  })</li>
              `
                )
                .join("")}
            </ul>
          </div>
          <div class="card">
            <h3>üßë‚Äçüíª Ng∆∞·ªùi d√πng m·ªõi</h3>
            <ul>
              ${data.latestUsers
                .map(
                  (u) => `
                <li><span class="label">${u.name}</span> - <span class="value">${u.email}</span></li>
              `
                )
                .join("")}
            </ul>
          </div>
          <div class="card">
            <h3>üì¶ Tr·∫°ng th√°i ƒë∆°n h√†ng</h3>
            <ul>
              ${Object.entries(data.orderStatus)
                .map(
                  ([key, value]) => `
                <li><span class="label">${key}:</span> <span class="value">${value}</span></li>
              `
                )
                .join("")}
            </ul>
          </div>
      `;

    // Chu·∫©n b·ªã d·ªØ li·ªáu dashboard d·∫°ng JSON string ƒë·ªÉ nh·ªìi v√†o prompt
    const dataJsonString = JSON.stringify(data);

    // Prompt cho chatbot v·ªõi d·ªØ li·ªáu n·ªïi b·∫≠t ƒë∆∞·ª£c nh·ªìi v√†o
    const prompt = `
  B·∫°n l√† tr·ª£ l√Ω ·∫£o cho qu·∫£n tr·ªã vi√™n c·ª≠a h√†ng. D∆∞·ªõi ƒë√¢y l√† d·ªØ li·ªáu th·ªëng k√™ b√°n h√†ng hi·ªán c√≥:
  ${dataJsonString}
  
  D·ª±a tr√™n c√°c d·ªØ li·ªáu tr√™n (doanh thu, ƒë∆°n h√†ng, ng∆∞·ªùi d√πng, s·∫£n ph·∫©m b√°n ch·∫°y, tr·∫°ng th√°i ƒë∆°n h√†ng, v.v), h√£y ph√¢n t√≠ch c√°c ƒëi·ªÉm n·ªïi b·∫≠t quan tr·ªçng nh·∫•t ƒë·ªÉ h·ªó tr·ª£ admin hi·ªÉu t√¨nh h√¨nh kinh doanh.
  
  C√¢u h·ªèi c·ªßa admin l√†:
  "${question}"
  
  B·∫°n KH√îNG c·∫ßn l·∫∑p l·∫°i to√†n b·ªô d·ªØ li·ªáu. Thay v√†o ƒë√≥, h√£y ch·ªçn l·ªçc v√† ph√¢n t√≠ch c√°c d·ªØ li·ªáu n·ªïi b·∫≠t, ƒë∆∞a ra nh·∫≠n x√©t chuy√™n s√¢u, xu h∆∞·ªõng quan tr·ªçng, v√† g·ª£i √Ω h√†nh ƒë·ªông ph√π h·ª£p ƒë·ªÉ c·∫£i thi·ªán doanh thu, qu·∫£n l√Ω ƒë∆°n h√†ng ho·∫∑c ph√°t tri·ªÉn kh√°ch h√†ng.
  
  Ng·ªØ ƒëi·ªáu n√™n mang t√≠nh ph√¢n t√≠ch, ch√≠nh x√°c, chuy√™n nghi·ªáp v√† h·ªó tr·ª£ quy·∫øt ƒë·ªãnh.
  `;

    // G·ªçi AI ƒë·ªÉ l·∫•y c√¢u tr·∫£ l·ªùi ph√¢n t√≠ch
    const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });
    const result = await model.generateContent(prompt);
    const answer = await result.response.text();
    const cleanAnswer = answer.replace(/```(html|plaintext)?\n/g, "").trim();

    // Gh√©p ph·∫ßn tr·∫£ l·ªùi chatbot v√†o cu·ªëi HTML
    const finalHtml = `
        ${dashboardHtml}
        <div class="card">
          <h3>üß† Tr·ª£ l√Ω tr·∫£ l·ªùi:</h3>
          <p class="question">"${question}"</p>
          <p class="answer">${cleanAnswer}</p>
        </div>
        </div>
      `;

    return finalHtml;
  } catch (error) {
    console.error("L·ªói x·ª≠ l√Ω c√¢u h·ªèi admin:", error);
    return `<p class="error-message">ƒê√£ c√≥ l·ªói x·∫£y ra khi tr·∫£ l·ªùi c√¢u h·ªèi.</p>`;
  }
}

export default askAdminQuestion;
