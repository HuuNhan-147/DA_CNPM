import User from "../models/UserModel.js";
import bcrypt from "bcryptjs";
import jwt from "jsonwebtoken";

export const createUser = async (req, res) => {
  try {
    const { name, email, password, phone, isAdmin } = req.body;

    // Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i ch∆∞a
    const userExists = await User.findOne({ email });
    if (userExists) {
      return res.status(400).json({ message: "Email ƒë√£ t·ªìn t·∫°i!" });
    }

    // BƒÉm m·∫≠t kh·∫©u tr∆∞·ªõc khi l∆∞u v√†o database
    const hashedPassword = await bcrypt.hash(password, 10);

    // T·∫°o Access Token & Refresh Token (KH√îNG l∆∞u v√†o .env, ch·ªâ l·∫•y secret t·ª´ ƒë√≥)
    const accessToken = jwt.sign(
      { email },
      process.env.ACCESS_TOKEN_SECRET, // üîê L·∫•y secret t·ª´ .env
      { expiresIn: "1h" }
    );
    const refreshToken = jwt.sign(
      { email },
      process.env.REFRESH_TOKEN_SECRET, // üîê L·∫•y secret t·ª´ .env
      { expiresIn: "7d" }
    );

    // T·∫°o ng∆∞·ªùi d√πng m·ªõi v√† l∆∞u token v√†o DB
    const newUser = new User({
      name,
      email,
      password: hashedPassword,
      phone,
      isAdmin: isAdmin || false,
      access_token: accessToken, // ‚úÖ L∆∞u token v√†o database
      refresh_token: refreshToken, // ‚úÖ L∆∞u token v√†o database
    });

    await newUser.save();

    res.status(201).json({
      message: "T·∫°o t√†i kho·∫£n th√†nh c√¥ng!",
      user: {
        id: newUser._id,
        name: newUser.name,
        email: newUser.email,
        phone: newUser.phone,
        isAdmin: newUser.isAdmin,
        access_token: newUser.access_token, // ‚úÖ Tr·∫£ v·ªÅ access_token
        refresh_token: newUser.refresh_token, // ‚úÖ Tr·∫£ v·ªÅ refresh_token
      },
    });
  } catch (error) {
    console.error("L·ªói chi ti·∫øt:", error);
    res.status(500).json({
      message: "L·ªói server!",
      error: error.message,
    });
  }
};
// üîπ 2. ƒêƒÉng nh·∫≠p ng∆∞·ªùi d√πng
export const loginUser = async (req, res) => {
  try {
    const { email, password } = req.body;

    // Ki·ªÉm tra t√†i kho·∫£n c√≥ t·ªìn t·∫°i kh√¥ng
    const user = await User.findOne({ email });
    if (!user) {
      return res.status(400).json({ message: "T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i!" });
    }

    // Ki·ªÉm tra m·∫≠t kh·∫©u
    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) {
      return res.status(400).json({ message: "M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng!" });
    }

    // T·∫°o Token
    const token = jwt.sign(
      { userId: user._id, isAdmin: user.isAdmin },
      process.env.ACCESS_TOKEN_SECRET,
      { expiresIn: "1h" }
    );

    // Tr·∫£ v·ªÅ th√¥ng tin c∆° b·∫£n c·ªßa user (·∫©n m·∫≠t kh·∫©u)
    res.status(200).json({
      message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng!",
      token,
      user: {
        id: user._id,
        name: user.name,
        email: user.email,
        phone: user.phone,
        isAdmin: user.isAdmin,
      },
    });
  } catch (error) {
    console.error("L·ªói chi ti·∫øt:", error);
    res.status(500).json({
      message: "L·ªói server!",
      error: error.message,
    });
  }
};

// üîπ 3. L·∫•y th√¥ng tin ng∆∞·ªùi d√πng
export const getUserProfile = async (req, res) => {
  try {
    // Ki·ªÉm tra xem req.userId c√≥ t·ªìn t·∫°i kh√¥ng
    if (!req.user) {
      return res.status(401).json({ message: "Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p!" });
    }

    // T√¨m ng∆∞·ªùi d√πng theo ID, lo·∫°i b·ªè password
    const user = await User.findById(req.user).select("-password");

    if (!user) {
      return res.status(404).json({ message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i!" });
    }

    res.status(200).json(user);
  } catch (error) {
    console.error("L·ªói chi ti·∫øt:", error);
    res.status(500).json({
      message: "L·ªói server!",
      error: error.message,
    });
  }
};

// üîπ 4. C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng
export const updateUserProfile = async (req, res) => {
  try {
    const user = await User.findById(req.user);
    if (!user) {
      return res.status(404).json({ message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i!" });
    }

    user.name = req.body.name || user.name;
    user.phone = req.body.phone || user.phone;
    if (req.body.password) {
      user.password = await bcrypt.hash(req.body.password, 10);
    }

    await user.save();
    res.status(200).json({ message: "C·∫≠p nh·∫≠t th√†nh c√¥ng!", user });
  } catch (error) {
    console.error("L·ªói chi ti·∫øt:", error);
    res.status(500).json({
      message: "L·ªói server!",
      error: error.message,
    });
  }
};

// üîπ 5. X√≥a ng∆∞·ªùi d√πng (Admin)
export const deleteUser = async (req, res) => {
  try {
    const user = await User.findById(req.params.id);
    if (!user) {
      return res.status(404).json({ message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i!" });
    }

    await user.deleteOne();
    res.status(200).json({ message: "X√≥a ng∆∞·ªùi d√πng th√†nh c√¥ng!" });
  } catch (error) {
    console.error("L·ªói chi ti·∫øt:", error);
    res.status(500).json({
      message: "L·ªói server!",
      error: error.message,
    });
  }
};

// üîπ 6. C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng (Admin)
export const updateUserByAdmin = async (req, res) => {
  try {
    const user = await User.findById(req.params.id);
    if (!user) {
      return res.status(404).json({ message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i!" });
    }

    user.name = req.body.name || user.name;
    user.email = req.body.email || user.email;
    user.phone = req.body.phone || user.phone;
    user.isAdmin =
      req.body.isAdmin !== undefined ? req.body.isAdmin : user.isAdmin;

    await user.save();
    res.status(200).json({ message: "C·∫≠p nh·∫≠t th√†nh c√¥ng!", user });
  } catch (error) {
    console.error("L·ªói chi ti·∫øt:", error);
    res.status(500).json({
      message: "L·ªói server!",
      error: error.message,
    });
  }
};

// üîπ 7. L·∫•y danh s√°ch t·∫•t c·∫£ ng∆∞·ªùi d√πng (Admin)
export const getAllUsers = async (req, res) => {
  try {
    if (!req.user || !req.user.isAdmin) {
      return res.status(403).json({ message: "B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p!" });
    }

    const users = await User.find().select("-password");
    res.status(200).json(users);
  } catch (error) {
    console.error("L·ªói chi ti·∫øt:", error);
    res.status(500).json({
      message: "L·ªói server!",
      error: error.message,
    });
  }
};
