import Cart from "../models/CartModel.js";
import Product from "../models/ProductModel.js";
import Order from "../models/OrderModel.js";
import mongoose from "mongoose";
// ‚úÖ Th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng
export const addToCart = async (req, res) => {
  try {
    const { productId, quantity } = req.body;
    const userId = req.user._id;

    const product = await Product.findById(productId);
    if (!product) {
      return res.status(404).json({ message: "S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i!" });
    }

    let cart = await Cart.findOne({ user: userId });

    if (!cart) {
      cart = new Cart({ user: userId, cartItems: [] });
    }

    const itemIndex = cart.cartItems.findIndex(
      (item) => item.product.toString() === productId
    );

    if (itemIndex > -1) {
      cart.cartItems[itemIndex].quantity += quantity;
    } else {
      cart.cartItems.push({
        product: productId,
        name: product.name,
        image: product.image,
        price: product.price,
        quantity,
      });
    }

    await cart.save();
    res.status(200).json({ message: "ƒê√£ th√™m v√†o gi·ªè h√†ng!", cart });
  } catch (error) {
    res.status(500).json({ message: "L·ªói server!", error: error.message });
  }
};

// ‚úÖ L·∫•y gi·ªè h√†ng c·ªßa ng∆∞·ªùi d√πng
export const getCart = async (req, res) => {
  try {
    // T√¨m gi·ªè h√†ng c·ªßa ng∆∞·ªùi d√πng
    const cart = await Cart.findOne({ user: req.user._id }).populate(
      "cartItems.product", // Populating th√¥ng tin s·∫£n ph·∫©m trong cartItems
      "name price image"
    );

    // Ki·ªÉm tra xem gi·ªè h√†ng c√≥ tr·ªëng kh√¥ng
    if (!cart || cart.cartItems.length === 0) {
      return res.status(404).json({ message: "Gi·ªè h√†ng tr·ªëng!" });
    }

    // T√≠nh t·ªïng ti·ªÅn c·ªßa s·∫£n ph·∫©m trong gi·ªè
    let itemsPrice = 0;
    cart.cartItems.forEach((item) => {
      if (item.product && item.product.price) {
        itemsPrice += item.product.price * item.quantity; // T√≠nh t·ªïng ti·ªÅn cho m·ªói s·∫£n ph·∫©m
      }
    });

    const shippingPrice = 30000; // Ph√≠ v·∫≠n chuy·ªÉn c·ªë ƒë·ªãnh
    const taxPrice = itemsPrice * 0.1; // Thu·∫ø 10%
    const totalPrice = itemsPrice + shippingPrice + taxPrice; // T·ªïng ti·ªÅn

    // Tr·∫£ v·ªÅ gi·ªè h√†ng c√πng v·ªõi th√¥ng tin t·ªïng ti·ªÅn
    res.status(200).json({
      cart: {
        _id: cart._id,
        user: cart.user,
        cartItems: cart.cartItems.map((item) => ({
          product: {
            _id: item.product._id,
            name: item.product.name,
            price: item.product.price,
            image: item.product.image,
          },
          quantity: item.quantity,
        })),
        createdAt: cart.createdAt,
        updatedAt: cart.updatedAt,
      },
      itemsPrice,
      shippingPrice,
      taxPrice,
      totalPrice,
    });
  } catch (error) {
    // X·ª≠ l√Ω l·ªói n·∫øu c√≥
    res.status(500).json({ message: "L·ªói server!", error: error.message });
  }
};

export const updateCartItem = async (req, res) => {
  try {
    const { productId, quantity } = req.body;
    const cart = await Cart.findOne({ user: req.user._id });

    if (!cart) {
      return res.status(404).json({ message: "Gi·ªè h√†ng tr·ªëng!" });
    }

    const itemIndex = cart.cartItems.findIndex(
      (item) => item.product.toString() === productId
    );

    if (itemIndex === -1) {
      return res.status(404).json({ message: "S·∫£n ph·∫©m kh√¥ng c√≥ trong gi·ªè!" });
    }

    if (quantity <= 0) {
      cart.cartItems.splice(itemIndex, 1); // X√≥a s·∫£n ph·∫©m n·∫øu quantity <= 0
    } else {
      cart.cartItems[itemIndex].quantity = quantity;
    }

    await cart.save();
    res.status(200).json({ message: "ƒê√£ c·∫≠p nh·∫≠t gi·ªè h√†ng!", cart });
  } catch (error) {
    res.status(500).json({ message: "L·ªói server!", error: error.message });
  }
};

export const removeFromCart = async (req, res) => {
  try {
    const { productId } = req.params;
    const userId = req.user._id;

    // Ki·ªÉm tra gi·ªè h√†ng c·ªßa user
    const cart = await Cart.findOne({ user: userId });

    if (!cart) {
      return res.status(404).json({ message: "Gi·ªè h√†ng kh√¥ng t·ªìn t·∫°i!" });
    }

    // Log d·ªØ li·ªáu ƒë·ªÉ ki·ªÉm tra
    console.log("üõí Gi·ªè h√†ng tr∆∞·ªõc khi x√≥a:", cart.cartItems);

    // Chuy·ªÉn ƒë·ªïi productId th√†nh ObjectId
    const productObjectId = new mongoose.Types.ObjectId(productId);

    // Ki·ªÉm tra xem s·∫£n ph·∫©m c√≥ trong gi·ªè kh√¥ng
    const itemIndex = cart.cartItems.findIndex((item) =>
      item.product.equals(productObjectId)
    );

    if (itemIndex === -1) {
      return res.status(404).json({ message: "S·∫£n ph·∫©m kh√¥ng c√≥ trong gi·ªè!" });
    }

    // X√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng
    cart.cartItems.splice(itemIndex, 1);

    // Ki·ªÉm tra n·∫øu gi·ªè h√†ng tr·ªëng, x√≥a lu√¥n gi·ªè h√†ng
    if (cart.cartItems.length === 0) {
      await Cart.findByIdAndDelete(cart._id);
      return res.status(200).json({ message: "Gi·ªè h√†ng hi·ªán ƒë√£ tr·ªëng!" });
    }

    // L∆∞u thay ƒë·ªïi v√†o database
    await cart.save();

    console.log("‚úÖ Gi·ªè h√†ng sau khi x√≥a:", cart.cartItems);

    res.status(200).json({ message: "ƒê√£ x√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng!", cart });
  } catch (error) {
    res.status(500).json({ message: "L·ªói server!", error: error.message });
  }
};
// ‚úÖ Thanh to√°n v√† t·∫°o ƒë∆°n h√†ng
export const checkout = async (req, res) => {
  try {
    const { shippingAddress, paymentMethod } = req.body;
    const userId = req.user._id;

    if (!shippingAddress || !paymentMethod) {
      return res.status(400).json({
        message: "Thi·∫øu th√¥ng tin giao h√†ng ho·∫∑c ph∆∞∆°ng th·ª©c thanh to√°n!",
      });
    }

    const cart = await Cart.findOne({ user: userId }).populate(
      "cartItems.product",
      "name image price"
    );

    if (!cart || cart.cartItems.length === 0) {
      return res.status(400).json({ message: "Gi·ªè h√†ng tr·ªëng!" });
    }

    const itemsPrice = cart.cartItems.reduce(
      (acc, item) => acc + item.product.price * item.quantity,
      0
    );
    const shippingPrice = 30000;
    const taxPrice = itemsPrice * 0.1;
    const totalPrice = itemsPrice + shippingPrice + taxPrice;

    const order = new Order({
      user: userId,
      orderItems: cart.cartItems,
      shippingAddress,
      paymentMethod,
      itemsPrice,
      shippingPrice,
      taxPrice,
      totalPrice,
      isPaid: false,
      paymentStatus: "pending",
    });

    await order.save();

    res.status(201).json({ message: "ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c t·∫°o!", order });
  } catch (error) {
    res.status(500).json({ message: "L·ªói server!", error: error.message });
  }
};
